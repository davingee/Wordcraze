to do 
one node of associations one node of everyone city that particpated
language node of all languages

get database update
make backup
get quereis working correctly
and random word 
add flagged and rated r to query


add a node for image sound and dictinary
var url = "http://www.google.com/dictionary/json?callback=dict_api.callbacks.id100&q=test&sl=en&tl=en&restrict=pr%2Cde&client=te"
$.ajax({
  url: '/json.js',
  dataType: 'json',
  data: data
});

var url = "http://www.google.com/dictionary/xml?callback=dict_api.callbacks.id100&q=test&sl=en&tl=en&restrict=pr%2Cde&client=te"

url= "http://www.google.com/dictionary/json?q="+query+"&sl=en&tl=en&restrict=pr%2Cde&client=te&callback=?";
url= "http://www.google.com/dictionary/json?q=speed&sl=en&tl=en&restrict=pr%2Cde&client=te&callback=?";

http://services.aonaware.com/DictService/DictService.asmx/Define?word=speed
http://services.aonaware.com/DictService/DictService.asmx?op=Define


$(document).ready(function() {
    var query;
    var url;
      query = "speed"
        url = "http://www.google.com/dictionary/json?q="+query+"&sl=en&tl=en&restrict=pr%2Cde&client=te&callback=?";
        var j = $.getJSON(url)
        $.getJSON(url, function(json) {
            $.each(json.primaries.terms,function(i,key){
                $("#results").append('<span class="dct-tt">'+key.text);
            });
        })
    });
});





var recipes = JSON.parse(theJSONObject).recipes;
recipes will be an array of objects. To access the first recipe's rating you could do something like this:

var firstRating = recipies[0].rating;



var jqxhr = $.getJSON(url, function() {
  alert("success");
})
.success(function() { alert("second success"); })
.error(function() { alert("error"); })
.complete(function() { alert("complete"); });

// perform other work here ...

// Set another completion function for the request above
jqxhr.complete(function(){ alert("second complete"); });



$.getJSON("/json.js", function(data) {
  var items = [];

  $.each(data, function(key, val) {
    items.push('<li id="' + key + '">' + val + '</li>');
  });

  $('<ul/>', {
    'class': 'my-new-list',
    html: items.join('')
  }).appendTo('body');
});


Good info on d3 svg styling and such
http://alignedleft.com/tutorials/d3/data-types/

# jqueryify the create of the association with the new nodes

Dictionary.com api
http://api-pub.dictionary.com/v001?vid=nq5v80bmlyoeyxyeapdtetpo1yakxl1lb7hj7s6sru&q=hello&type=define&site=dictionary

link image 
get ico of image with lots of nodes
add gravatar rumorsource code to image if has user_id
stylize div get href in div as well
add stats of how many words, how many associations etc.


order by date so theirs gets seen for sure

get rand by order by count (implement) limit 10 rand adding a bit or order to the random

scope what was scrubbed limit 5 verses user data
add scrubbed in Word.db
random word where I dont get repeats until there all up



# add links to allow someone to say wether it is rated r or spam
# tally the times a user hits either
# add validation of length of word
# add current user functionality association has many users
# and capture location

word = Word.find_or_create_by_name("the cup is half")
word.fill_in = true
word.save




random word stuff

# rand_id = rand(Word.count)
# @random_word ||= Word.first(:conditions => [ "id >= ?", rand_id])
# @random_word ||= Word.find_by_sql("SELECT * FROM `words` WHERE id >= (SELECT FLOOR( MAX(id) * RAND()) FROM `words` ) ORDER BY id LIMIT 1").first
# if session[:associated] == "true"

# @random_word.find_all(:got => 1)
# Word.where(:associations => 1)
# Association.includes(:word).where(:)
# Word.includes(:associations).where(:associations => {:count => 20})
# 
# # scope :filter_by_branch, lambda{|association_id| includes(:associations).where(:associations => {:count => 1})
# Company.includes(:branches).where(:branches => {:id => 3})
# 
# # else
#   # find most associated word
#   # queries = [1, 2, 3]
#   # queries(rand)
#   @random_word ||= Word.where("associations > ?", 2)
#   @random_word = Word.find(:all, :include => :associations, :conditions => {:associations => associations.length > 4})
#   @random_word = Word.all( :include => :associations, :conditions => ["associations.length > ?", 4])
#   
#   .find_by_sql("SELECT * FROM words ORDER BY RAND() LIMIT 1").first
#   session[:word] = @random_word
#   Association.where(association_id =>)
#   # Word.conditions("words.name LIKE ?", "%#{q.downcase}%")

# end
# if @random_word.name.blank?
#   random_word
# end

