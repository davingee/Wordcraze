<script type="text/javascript">
var url = "http://www.google.com/dictionary/json?callback=dict_api.callbacks.id100&q=test&sl=en&tl=en&restrict=pr%2Cde&client=te"

var jqxhr = $.getJSON(url, function() {
  alert("success");
})



function myGraph(el) {

    // Add and remove elements on the graph object
    this.addNode = function (id, text, url, image_url, value) {
        nodes.push({"id":id, "text":text, "url":url, "image_url":image_url, "value":value});
        this.update();
    }

    this.removeNode = function (id) {
        var i = 0;
        var n = findNode(id);
        while (i < links.length) {
            if ((links[i]['source'] == n)||(links[i]['target'] == n)) links.splice(i,1);
            else i++;
        }
        nodes.splice(findNodeIndex(id),1);
        this.update();
    }

    this.clear = function() {
      var self = this;
      jQuery(nodes).each(function(node) {
        self.removeNode(node.id);
      });
      links = [];
      this.update();
    }

    this.addLink = function (source, target, value) {
        links.push({"source":findNode(source),"target":findNode(target), "value":value});
        
        this.update();
    }

    var findNode = function(id) {
        for (var i in nodes) {if (nodes[i]["id"] === id) return nodes[i]};
    }

    var findNodeIndex = function(id) {
        for (var i in nodes) {if (nodes[i]["id"] === id) return i};
    }

    // set up the D3 visualisation in the specified element
    var w = $(el).innerWidth(),
        // h = $(el).innerHeight();
        h = $(window).height() - 160;   // returns height of browser viewport

    var vis = this.vis = d3.select(el)
        .append("svg:svg")
        .attr("width", w)
        .attr("height", h);

    var force = d3.layout.force()
        .gravity(.1)
        .distance(170)
        .charge(-250)
        .linkDistance("25")
        //https://github.com/mbostock/d3/wiki/Force-Layout
        .size([w, h]);

    var nodes = force.nodes(),
        links = force.links();

    this.update = function () {

        var link = vis.selectAll("line.link")
        
            .data(links, function(d) { return d.source.id + "-" + d.target.id; })
            .attr("class", "link")
            .style("stroke-width", function(d) { return Math.sqrt(d.value); });
            

        link.enter().insert("line")
            .attr("class", "link");

        link.exit().remove();

        var node = vis.selectAll("g.node")
            .data(nodes, function(d) { return d.id;});

        var nodeEnter = node.enter().append("g")
            .attr("class", "node")
            .call(force.drag);

        // nodeEnter.append("a")
        //     .attr("class", "node")
        //     .attr("xlink:href", function(d) { return d.url})
        //     .attr("data-remote", "true")
        //     .append("image")
        //       .attr("class", "circle")
        //       .attr("xlink:href", function(d) { return d.image_url})
        //       .attr("x", "-8px")
        //       .attr("y", "-8px")
        //       .attr("width", "26px")
        //       .attr("height", "26px");
       
        // nodeEnter.append("div")
        //   .attr("class", "node_div")
        //   .attr("width", 320)
        //   .attr("height", 120)
        //   .style("fill", "yellow")
        //   .append("text")
        //   .attr("class", "nodetext")
        //   .attr("x", "-16px")
        //   .attr("y", "0px")
        //   .attr("dx", 2)
        //   .attr("dy", ".35em")
        //   // .text(function(d) {return d.text});
        //   .text(function(d) {return d.text})
        //   // .style("font-size", "18px")
        //   .style("font-size", function(d) { return Math.sqrt(d.value * 223)  + "px"; })
        //   .style("font-family", "SFArchRivalRegular, Arial, sans-serif");

        // nodeEnter.append("rect")
        //   // .attr("width", 20 * data.length)
        //   // .attr("width", function(d) { return (d.name.length * "20")})
        //   .attr("width", 120)
        //   .attr("height", 20)
        //   .attr("x", "-16px")
        //   .attr("y", "0px")
        //   .attr("dx", 2)
        //   .attr("dy", ".35em")
        //   .style("fill", "yellow");

        nodeEnter.append("a")
            .attr("class", "node_a")
            .attr("xlink:href", function(d) { return d.url})
            .attr("data-remote", "true")
            // .attr("onclick", $("#throbber").show() )
              .append("text")
              .attr("class", "nodetext")
              .attr("x", "-16px")
              .attr("y", "0px")
              .attr("dx", 2)
              .attr("dy", ".35em")
              .text(function(d) {return d.text})
              .style("font-size", function(d) { return Math.sqrt(d.value * 200)  + "px"; })
              .style("font-family", "SFArchRivalRegular, Arial, sans-serif");

        <% if admin %>
        
        // nodeEnter.append("a")
        //     .attr("class", "admin")
        //     .attr("xlink:href", function(d) { return "/remove_association?id=<%= @word.id %>&association_id=" + d.id})
        //     .attr("data-remote", "true")
        //       .append("text")
        //       .attr("class", "nodetext")
        //       .attr("x", "-26px")
        //       .attr("y", "20px")
        //       .attr("dx", 2)
        //       .attr("title", "")
        //       .attr("dy", ".35em")
        //       .text("remove")
        //       .style("background-color", "#4B7399")
        //       .style("font-size", "10px")
        //       .style("font-family", "SFArchRivalRegular, Arial, sans-serif");
              
        
        <% end %>
        


        node.exit().remove();

        force.on("tick", function() {
          link.attr("x1", function(d) { return d.source.x; })
              .attr("y1", function(d) { return d.source.y; })
              .attr("x2", function(d) { return d.target.x; })
              .attr("y2", function(d) { return d.target.y; });

          node.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });
        });

        // Restart the force layout.
        force.start();
    }

    // Make it all go
    this.update();
}

</script>
